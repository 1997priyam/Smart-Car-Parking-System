import requests, json
import base64
import os
counter = 1
photo = str(counter)+'.jpg'
click = 'fswebcam '+photo
os.system(click)
headers = {'content-type': 'application/json'}
server_url = "https://vision.googleapis.com/v1/images:annotate?key=AIzaSyBxBfSVPsLH9bODU8IlcZSgzthww67Bqec"

body = {
  "requests":[
    {
      "image":{
        "content":"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"
      },
      "features":[
        {
          "type":"TEXT_DETECTION",
          "maxResults":1
        }
      ]
    }
  ]
}

with open(photo, "rb") as image_file:
    encoded_string = base64.b64encode(image_file.read())
body['requests'][0]['image']['content'] = encoded_string
r = requests.post(server_url, data=json.dumps(body), headers=headers)
x = r.json()
print(x['responses'][0]['textAnnotations'][0]['description'])